{
	// Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
  // }
  "Template": {
    "prefix": ["template"],
    "body": ["package main", "", "func main() {", "\t$1", "}"]
  },
  "FindMin": {
    "prefix": ["findmin"],
    "body": [
      "min := l[0]",
      "for _, arg := range l {",
      "\tif arg < min {",
      "\t\tmin = arg",
      "\t}",
      "}"
    ]
  },
  "FindMax": {
    "prefix": ["findmax"],
    "body": [
      "min := l[0]",
      "for _, arg := range l {",
      "\tif arg > min {",
      "\t\tmax = arg",
      "\t}",
      "}"
    ]
  },
  "Open": {
    "prefix": ["open"],
    "body": [
      "file, _ := os.Open($1)",
      "defer file.Close()",
      "data := make([]byte, 100)",
      "file.Read(data)",
      "fmt.Println(string(data))"
    ]
  },
  "Print": {
    "prefix": ["print"],
    "body": ["fmt.Println($1)"]
  },
  "Printf": {
    "prefix": ["printf"],
    "body": ["fmt.Printf(\"%T\", $1)"]
  },
  "HttpRequest": {
    "prefix": ["httprequest"],
    "body": [
      "req, _ := http.NewRequest(\"GET\", {cursor}, nil)",
      "var client *http.Client = &http.Client{}",
      "resp, _ := client.Do(req)",
      "body, _ := ioutil.ReadAll(resp.Body)",
      "fmt.Println(string(body))"
    ]
  },
  "Sleep": {
    "prefix": ["sleep"],
    "body": ["time.Sleep($1 * time.Second)"]
  },
  "WriteFile": {
    "prefix": ["writefile"],
    "body": [
      "err := ioutil.WriteFile({cursor}, content, 0666)",
      "\tif err != nil {",
      "\tlog.Fatalln(err)",
      "}"
    ]
  }
}
